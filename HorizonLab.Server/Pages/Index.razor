@page "/"
@inject HorizonLab.DataLayer.Services.IDataService DataService
@using HorizonLab.DataLayer.Models

<PageTitle>Charts</PageTitle>
<h1>Charts</h1>



<Button Color="Color.Primary" Clicked="@(async () => await HandleRedraw())">Redraw</Button>

<LineChart @ref="lineChartOne" TItem="double" style="max-height: 440px;" />
<LineChart @ref="lineChartTwo" TItem="double" style="max-height: 440px;" />


@code {
    private Device? device;
    private List<MeasurementTemperature> measurementTemperaturesClientOne = new();
    private List<MeasurementTemperature> measurementTemperaturesClientTwo = new();
    private LineChart<double>? lineChartOne;
    private LineChart<double>? lineChartTwo;

    protected override async Task OnInitializedAsync()
    {
        device = await DataService.Device.GetDevice(1);
        await GetTempClientOne();
        await GetTempClientTwo();
    }

    private async Task GetTempClientOne()
    {
        measurementTemperaturesClientOne = await DataService.MeasurementTemperature.GetMeasurementTemperatures();
    }

    private async Task GetTempClientTwo()
    {
        measurementTemperaturesClientTwo = await DataService.MeasurementTemperature.GetMeasurementTemperaturesClientTwo();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        await lineChartOne.Clear();
        await lineChartOne.AddLabelsDatasetsAndUpdate(Labels, GetLineChartDatasetClientOne());

        await lineChartTwo.Clear();
        await lineChartTwo.AddLabelsDatasetsAndUpdate(Labels, GetLineChartDatasetClientTwo());
    }

    LineChartDataset<double> GetLineChartDatasetClientOne()
    {
        return new LineChartDataset<double>
            {
                Label = "dk25-1",
                Data = measurementTemperaturesClientOne.Select(x => x.Temperature).ToList(),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                Fill = true,
                PointRadius = 3,
                CubicInterpolationMode = "monotone",
            };
    }

    LineChartDataset<double> GetLineChartDatasetClientTwo()
    {
        return new LineChartDataset<double>
            {
                Label = "dk25-2",
                Data = measurementTemperaturesClientTwo.Select(x => x.Temperature).ToList(),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                Fill = true,
                PointRadius = 3,
                CubicInterpolationMode = "monotone",
            };
    }

    string[] Labels = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" };

    List<string> backgroundColors = new List<string> {
        ChartColor.FromRgba(255, 99, 132, 0.2f),
        ChartColor.FromRgba(54, 162, 235, 0.2f),
        ChartColor.FromRgba(255, 206, 86, 0.2f),
        ChartColor.FromRgba(75, 192, 192, 0.2f),
        ChartColor.FromRgba(153, 102, 255, 0.2f),
        ChartColor.FromRgba(255, 159, 64, 0.2f)
    };

    List<string> borderColors = new List<string> {
        ChartColor.FromRgba(255, 99, 132, 1f),
        ChartColor.FromRgba(54, 162, 235, 1f),
        ChartColor.FromRgba(255, 206, 86, 1f),
        ChartColor.FromRgba(75, 192, 192, 1f),
        ChartColor.FromRgba(153, 102, 255, 1f),
        ChartColor.FromRgba(255, 159, 64, 1f)
    };
}
